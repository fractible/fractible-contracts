archetype sales(
    owner: address,
    sales_storage: address,
    permits: address
)
with metadata ""

constant AMOUNT_MISMATCH         : string = "AMOUNT_MISMATCH"
constant BUNDLE_CANT_BE_EMPTY    : string = "BUNDLE_CANT_BE_EMPTY"
constant CANT_UNPACK_BUNDLE      : string = "CANT_UNPACK_BUNDLE"
constant CANT_UNPACK_FA12_ASSET  : string = "CANT_UNPACK_FA12_ASSET"
constant CANT_UNPACK_FA2_ASSET   : string = "CANT_UNPACK_FA2_ASSET"
constant FEES_OVER_SELLER_LIMIT  : string = "FEES_OVER_SELLER_LIMIT"
constant INVALID_BUNDLE_ITEM_QTY : string = "INVALID_BUNDLE_ITEM_QTY"
constant INVALID_BUY_AMOUNT      : string = "INVALID_BUY_AMOUNT"
constant INVALID_CALLER          : string = "INVALID_CALLER"
constant INVALID_SALE_END_DATE   : string = "INVALID_SALE_END_DATE"
constant INVALID_SALE_START_DATE : string = "INVALID_SALE_START_DATE"
constant MAX_BUNDLE_SIZE         : string = "MAX_BUNDLE_SIZE"
constant MISSING_BUNDLE_SALE     : string = "MISSING_BUNDLE_SALE"
constant MISSING_CANDIDATE       : string = "MISSING_CANDIDATE"
constant MISSING_SALE            : string = "MISSING_SALE"
constant SALE_ALREADY_EXISTS     : string = "SALE_ALREADY_EXISTS"
constant SALE_CLOSED             : string = "SALE_CLOSED"
constant SALE_NOT_STARTED        : string = "SALE_NOT_STARTED"
constant WRONG_XTZ_PAYLOAD       : string = "WRONG_XTZ_PAYLOAD"

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  constant {
    candidate ?is owner_candidate otherwise MISSING_CANDIDATE
  }
  require {
    r0: caller = candidate otherwise INVALID_CALLER
  }
  effect {
    owner := candidate;
    owner_candidate := none
  }
}


//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_sales_storage_contract(sesc_contract : address) {
  called by owner
  effect {
    sales_storage := sesc_contract;
  }
}

entry set_permits(sp_contract : address) {
  called by owner
  effect {
    permits := sp_contract;
  }
}

/* Authorized ------------------------------------------------------------ */
asset authorizations {
  authorization : address
}

enum authorization_op =
| add<address>
| remove<address>

entry manage_authorization(op : authorization_op) {
  called by owner
  effect {
    match op with
    | add(a)    -> authorizations.add({ a })
    | remove(a) -> authorizations.remove(a)
    end
  }
}

//----------------------------------------------------------------------------
// Types
//----------------------------------------------------------------------------
record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

record buy_param {
  buy_sale_id: nat;
  buy_qty: nat;
}

record balance_of_request {
  bor_owner : address;
  bor_token_id : nat;
} as ((owner, token_id))

record sale {
  sale_contract: address;
  sale_token_id: nat;
  sale_seller: address;
  sale_price_per_item: nat;
  sale_qty: nat;
  sale_start: option<date>;
  sale_end: option<date>;
  sale_version: nat;
  sale_data_type  : bytes;
  sale_data       : bytes;
}

entry sell (
  s_sale : sale,
  s_seller_pubk: key,
  s_sig: signature) {
    constant {
      start_date is s_sale.sale_start ? the: now;
      seller_address is key_to_address(s_seller_pubk);
      user_balance ?is get_balance_for_token(s_sale.sale_contract, {bor_owner = s_sale.sale_seller; bor_token_id = s_sale.sale_token_id }) otherwise "INSUFFICIENT_BALANCE"
    }
    require {
      sell_invalid_price: s_sale.sale_price_per_item > 0;
      sell_invalid_qty: s_sale.sale_qty > 0;
      inconsistent_seller: seller_address = s_sale.sale_seller;
      insufficient_balance: user_balance > s_sale.sale_qty;
    }
    effect {
      var packed_data = pack(s_sale);
      transfer 0tz to permits call check<key * signature * bytes>((s_seller_pubk, s_sig, packed_data));
      match s_sale.sale_end with
      | some(end_date) -> begin
        do_require(end_date > now, "SALE_END_IN_THE_PAST");
        do_require(end_date > start_date, "SALE_END_BEFORE_START");
      end
      | none -> ()
      end;
      transfer 0tz to sales_storage call set_sale<sale>(s_sale);
    }
}


entry buy(
  b_param: buy_param,
  b_buyer_pubk: key,
  b_sig: signature){
    constant {
      stored_sale ?is get_sale(b_param.buy_sale_id) otherwise "MISSING_SALE";
      stored_sale_stock is stored_sale.sale_qty;
      stored_sale_start is stored_sale.sale_start;
      stored_sale_end is stored_sale.sale_end;
      buyer_address is key_to_address(b_buyer_pubk);
    }
    require {
      buy_incorrect_qty: b_param.buy_qty > 0 and b_param.buy_qty >= stored_sale_stock;
    }
    effect {
      var packed_data = pack((b_param.buy_sale_id, b_param.buy_qty));
      transfer 0tz to permits call check<key * signature * bytes>((b_buyer_pubk, b_sig, packed_data));
      match stored_sale_end with
      | some(end_date) -> begin
        do_require(end_date > now, SALE_CLOSED);
      end
      | none -> ()
      end;

      match stored_sale_start with
      | some(sale_start) -> begin
        do_require(sale_start < now, SALE_NOT_STARTED);
      end
      | none -> ()
      end;

      transfer 0tz to stored_sale.sale_contract call %transfer<list<address * list<transfer_param>>>(
        [
            (
                stored_sale.sale_seller,
                [
                    {
                        destination_address = buyer_address;
                        token_id = stored_sale.sale_token_id;
                        token_amount = stored_sale.sale_qty
                    }
                ]
            )
        ]
      );

      if(b_param.buy_qty = stored_sale_stock) then (
        transfer 0tz to sales_storage call remove_sale<nat>(b_param.buy_sale_id)
      ) else (
        stored_sale.sale_qty := abs(stored_sale.sale_qty - b_param.buy_qty);
        transfer 0tz to sales_storage call update_sale<nat * sale>(
          (
            b_param.buy_sale_id,
            stored_sale
          )
        );
      )
    }
}



entry cancel_sale(
  cs_sale_id: nat,
  cs_seller_pubk: key,
  cs_sig: signature){
    constant {
      stored_sale ?is get_sale(cs_sale_id) otherwise "MISSING_SALE";
      seller_address is key_to_address(cs_seller_pubk);
    }
    require {
      invalid_caller: stored_sale.sale_seller = seller_address
    }
    effect {
      var packed_data = pack(cs_sale_id);
      transfer 0tz to permits call check<key * signature * bytes>((cs_seller_pubk, cs_sig, packed_data));
      transfer 0tz to sales_storage call remove_sale<nat>(cs_sale_id)
    }
}

function sale_exists(se_sale_id: nat) : bool {
    return match call_view<bool>(
        sales_storage,
        "sale_exists",
        se_sale_id
    )
    with
        | some(v) -> v
        | none -> false
    end
}


function get_sale(gs_sale_id: nat) : option<sale> {
    return (call_view<option<sale>>(
        sales_storage,
        "get_sale",
        gs_sale_id
    ) ? the : none<sale>)
}

function get_balance_for_token(gbft_contract: address, gbft_request: balance_of_request) : option<nat> {
    return (call_view<option<nat>>(
        gbft_contract,
        "get_balance",
        gbft_request
    ) ? the : none<nat>)
}

entry default() {}