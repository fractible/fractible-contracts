archetype nft(owner : address, permits : address, whitelist: address, marketplace: address) with metadata ""

variable token_id_sequence : nat = 0

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/*  PAUSABLE ----------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  called by owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  called by owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* Marketplace ---------------------------------------------------------------- */

entry set_marketplace(sm_marketplace : address) {
  called by owner
  require { p_r1 : is_not_paused() }
  effect {
    marketplace := sm_marketplace
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(sm_meta_key: string, sm_meta_value : option<bytes>) {
  called by owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(sm_meta_key, sm_meta_value)
  }
}

/* TOKEN METADATA ------------------------------------------------------------ */

asset token_metadata to big_map {
  token_metadata_id : nat;
  token_id        : nat;
  token_info      : map<string, bytes>;
}

entry set_token_metadata (stm_token_id : nat, stm_token_metadata: map<string, bytes>) {
  called by owner
  require { tmd_r1: is_not_paused() }
  effect {
    token_metadata.add_update(stm_token_id, { token_id = stm_token_id; token_info = stm_token_metadata });
  }
}

/* PERMITS ----------------------------------------------------------------- */

entry set_permits(sp_permit : address) {
  called by owner
  require { sp_r1 : is_not_paused() }
  effect {
    permits := sp_permit
  }
}

//----------------------------------------------------------------------------
// Minter role
//----------------------------------------------------------------------------

asset minter {
  addr : address
}

entry add_minter(am_minter : address) {
  called by owner
  effect {
    minter.add({ am_minter })
  }
}

entry rm_minter(rm_minter : address) {
  called by owner
  effect {
    minter.remove(rm_minter)
  }
}

/* ERRORS ----------------------------------------------------------------- */

constant CALLER_NOT_OWNER         : string = "CALLER_NOT_OWNER"
constant FA2_INSUFFICIENT_BALANCE : string = "FA2_INSUFFICIENT_BALANCE"
constant FA2_INVALID_AMOUNT       : string = "FA2_INVALID_AMOUNT"
constant FA2_NOT_OPERATOR         : string = "FA2_NOT_OPERATOR"
constant FA2_TOKEN_UNDEFINED      : string = "FA2_TOKEN_UNDEFINED"

/* PARAMETERS ------------------------------------------------------------- */

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to_, (token_id, amount)))

record transfer_param {
  tp_from : address;
  tp_txs  : list<transfer_destination>;
} as ((%from_, %txs))

record mint_param {
  mint_dest : address;
  mint_amount  : nat;
}

/* STORAGE ---------------------------------------------------------------- */

asset ledger identified by ledger_token_owner ledger_token_id to big_map {
  ledger_token_owner     : address;
  ledger_token_id   : nat;
  ledger_token_amount    : nat = 0;
}

asset operator identified by operator_addr operator_token_id operator_token_onwer to big_map {
  operator_addr       : address;
  operator_token_id      : nat;
  operator_token_onwer      : address;
}

asset operator_for_all identified by operator_fa_addr operator_fa_token_onwer to big_map {
  operator_fa_addr    : address;
  operator_fa_token_onwer   : address;
}

/* FUNCTIONS --------------------------------------------------------------- */

function get_from(gf_txs : list<transfer_param>) : option<address> {
  match gf_txs with
  | hd::tl -> begin
    const %from = hd.tp_from;
    for tx in tl do
      do_require(%from = tx.tp_from, FA2_NOT_OPERATOR)
    done;
    return some(%from)
  end
  | [] -> return none
  end
}

function check_operator(co_txs : list<transfer_param>) : bool {
  var res = true;
  for tx in co_txs do
    const %from = tx.tp_from;
    const tds = tx.tp_txs;
    for td in tds do begin
      res &=
        if caller <> %from then
          (operator.contains((caller, td.token_id_dest, %from)) or
           operator_for_all.contains((caller, %from)))
        else
          true;
    end
    done
  done;
  return res
}

/* ENTRYPOINTS ------------------------------------------------------------- */

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

entry update_operators (uo_operators : list<or<operator_param, operator_param>>) {
  require { fa2_r1 : is_not_paused() }
  effect {
    for up in uo_operators do
      match up with
      | left(param) -> (* add *)
        do_require(param.opp_owner = caller , CALLER_NOT_OWNER);
        operator.put({param.opp_operator; param.opp_token_id; param.opp_owner})
      | right(param) -> (* remove *)
        do_require(param.opp_owner = caller , CALLER_NOT_OWNER);
        operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
      end;
    done;
  }
}

enum update_for_all_op =
| add_for_all
| remove_for_all

record update_for_all_param {
  upfa_op_type : update_for_all_op;
  upfa_op  : address;
}

entry update_operators_for_all (upfa_operators : list<update_for_all_param>) {
  require { fa2_r2 : is_not_paused() }
  effect {
    for op in upfa_operators do
      match op.upfa_op_type with
      | add_for_all  ->
          operator_for_all.put({ op.upfa_op; caller })
      | remove_for_all ->
          operator_for_all.remove((op.upfa_op, caller))
      end;
    done;
  }
}

entry update_operator_for_all_gasless (upfa_operator : update_for_all_param, upfa_pubk: key, upfa_sig: signature) {
  require { fa2_r2b : is_not_paused() }
  effect {
    const seller_address = key_to_address(upfa_pubk);
    transfer 0tz to permits call check<key * signature * bytes>((upfa_pubk, upfa_sig, pack(upfa_operator)));
    match upfa_operator.upfa_op_type with
    | add_for_all  ->
        operator_for_all.put({ upfa_operator.upfa_op; seller_address })
    | remove_for_all ->
        operator_for_all.remove((upfa_operator.upfa_op, seller_address))
    end;
  }
}


record transfer_gasless_param {
  transfer_params : list<transfer_param>;
  user_pk         : key;
  user_sig        : signature
}

record burn_gasless_param {
  burn_token_id : nat;
  burn_amount : nat;
}

function check_owner(co_addr : address, co_txs : list<transfer_param>) : bool {
  var res = true;
  for tx in co_txs do
    res &= co_addr = tx.tp_from
  done;
  return res
}

entry transfer_gasless (batch : list<transfer_gasless_param>) {
  require { fa2_r3 : is_not_paused() }
  effect {
    for b in batch do
      const txs = b.transfer_params;
      const pk  = b.user_pk;
      const sig = b.user_sig;
      const pkh_signer = key_to_address(pk);
      do_require(check_owner(pkh_signer, txs), "SIGNER_NOT_FROM");
      transfer 0tz to permits call check<key * signature * bytes>((pk, sig, pack(txs)));
      for tx in txs do
        const %from = tx.tp_from;
        const tds   = tx.tp_txs;
        for td in tds do begin
          const is_authorized ?= call_view<string>(whitelist, "assert_transfer", (caller, %from, td.to_dest)) : "ASSERT_TRANSFER_FAILED";
          do_require(is_authorized = "", is_authorized);
          const tid = td.token_id_dest;
          const amount = ledger[(%from, tid)]?.ledger_token_amount ? the : 0;
          const new_amount ?=
              int_to_nat(amount - td.token_amount_dest) : FA2_INSUFFICIENT_BALANCE;
          if new_amount = 0 then
            ledger.remove((%from, tid))
          else begin
            ledger.update((%from, tid), { ledger_token_amount := new_amount });
          end;
          ledger.add_update((td.to_dest, tid), { ledger_token_amount += td.token_amount_dest });
          if caller <> marketplace then begin
            transfer 0tz to marketplace call cancel_matching_orders<address * nat * address>((self_address, tid, %from));
          end
      end done
      done
    done
  }
}

entry %transfer (transfers : list<transfer_param>) {
  require {
    fa2_r4 : is_not_paused()
  }
  effect {
    if not check_operator(transfers) then begin
      match get_from(transfers) with
      | some(%from) ->
        transfer 0tz to permits
          call consume<address * bytes * string>((%from, pack(transfers), FA2_NOT_OPERATOR))
      | none -> ()
      end
    end;

    for tx in transfers do
      const %from = tx.tp_from;
      const tds   = tx.tp_txs;
      for td in tds do begin
        const is_authorized ?= call_view<string>(whitelist, "assert_transfer", (caller, %from, td.to_dest)) : "ASSERT_TRANSFER_FAILED";
        do_require(is_authorized = "", is_authorized);
        const tid = td.token_id_dest;
        const amount = ledger[(%from, tid)]?.ledger_token_amount ? the : 0;
        const new_amount ?=
            int_to_nat(amount - td.token_amount_dest) : FA2_INSUFFICIENT_BALANCE;
        if new_amount = 0 then
          ledger.remove((%from, tid))
        else begin
          ledger.update((%from, tid), { ledger_token_amount := new_amount });
        end;
        ledger.add_update((td.to_dest, tid), { ledger_token_amount += td.token_amount_dest });
        if caller <> marketplace then begin
          transfer 0tz to marketplace call cancel_matching_orders<address * nat * address>((self_address, tid, %from));
        end
      end done
    done
  }
}

entry mint (mints : list<mint_param>, tdata: map<string, bytes>) {
  called by owner or minter
  require { fa2_r5: is_not_paused() }
  effect {
    for mint_arg in mints do
      const is_authorized ?= call_view<bool>(whitelist, "assert_receiver", mint_arg.mint_dest) : "ASSERT_RECEIVER_FAILED";
      do_require(is_authorized = true, ("UNAUTHORIZED _USER", mint_arg.mint_dest));
      ledger.add_update((mint_arg.mint_dest, token_id_sequence), { ledger_token_amount += mint_arg.mint_amount });
    done;
    token_metadata.add_update(token_id_sequence, { token_id = token_id_sequence; token_info = tdata });
    token_id_sequence := token_id_sequence + 1;
  }
}

entry burn(tid : nat, nbt : nat) {
  constant {
    amount ?is ledger[(caller, tid)]?.ledger_token_amount otherwise FA2_INSUFFICIENT_BALANCE
  }
  require {
    fa2_r6: is_not_paused();
    fa2_r7: amount >= nbt otherwise FA2_INSUFFICIENT_BALANCE
  }
  effect {
    if (amount > nbt) then
      ledger.update((caller, tid), { ledger_token_amount -= nbt })
    else begin
      ledger.remove((caller, tid));
      token_metadata.remove(tid)
    end
  }
}

entry burn_gasless(b_params: burn_gasless_param, owner_pubk: key, owner_sig: signature) {
  constant {
    signer is key_to_address(owner_pubk);
    amount ?is ledger[(signer, b_params.burn_token_id)]?.ledger_token_amount otherwise FA2_INSUFFICIENT_BALANCE
  }
  require {
    fa2_r66: is_not_paused();
    fa2_r77: amount >= b_params.burn_amount otherwise FA2_INSUFFICIENT_BALANCE
  }
  effect {
    transfer 0tz to permits call check<key * signature * bytes>((owner_pubk, owner_sig, pack(b_params)));
    if (amount > b_params.burn_amount) then
      ledger.update((signer, b_params.burn_token_id), { ledger_token_amount -= b_params.burn_amount })
    else begin
      ledger.remove((signer, b_params.burn_token_id));
      token_metadata.remove(b_params.burn_token_id)
    end
  }
}

/* GETTERS ----------------------------------------------------------------- */

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br ->
    let b = (ledger[(br.bo_owner, br.btoken_id)] ? the.ledger_token_amount : 0) in
    {
      request = br;
      balance_ = b
    })
}

view get_balance (gb_request : balance_of_request) : option<nat> {
  return ledger[(gb_request.bo_owner, gb_request.btoken_id)]?.ledger_token_amount
}
